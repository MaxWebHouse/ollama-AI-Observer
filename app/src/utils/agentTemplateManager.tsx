// src/utils/agentTemplateManager.ts

import { CompleteAgent } from './agent_database';

export type SimpleTool = 'notification' | 'memory';

const TOOL_CODE_SNIPPETS: Record<SimpleTool, string> = {
  notification: `
  // --- NOTIFICATION TOOL ---
  // If the response is not empty, send a notification.
  if (response) {
    notify("Observer AI Agent", response);
  }`,
  memory: `
  // --- MEMORY TOOL ---
  // If the response is not empty, append it to this agent's memory.
  if (response) {
    const timestamp = time();
    appendMemory(agentId, \`\\n[\${timestamp}] \${response}\`);
  }`
};

interface SimpleConfig {
  agentData: Partial<CompleteAgent>;
  selectedTools: SimpleTool[];
  condition: {
    enabled: boolean;
    keyword: string;
  };
}

/**
 * Generates a complete agent configuration object and code string
 * from the simple creator's configuration.
 * @param config The configuration object from the SimpleCreatorModal.
 * @returns An object with the complete agent data and the generated code.
 */
export function generateAgentFromSimpleConfig(
  config: SimpleConfig
): { agent: CompleteAgent; code: string } {
  
  const comments = [
    '// This code was auto-generated by the Simple Agent Creator.',
    '// You can edit it to add more complex logic.',
    ''
  ].join('\n');

  // Combine the code snippets for all selected tools.
  let combinedCode = config.selectedTools
    .map(tool => TOOL_CODE_SNIPPETS[tool])
    .join('\n');

  // If the conditional toggle is on, wrap the code in an if-block.
  if (config.condition.enabled && config.condition.keyword) {
    const keyword = config.condition.keyword.replace(/'/g, "\\'"); // Escape single quotes
    combinedCode = `
if (response.includes('${keyword}')) {
  ${combinedCode.split('\n').map(line => `  ${line}`).join('\n').trim()}
}`;
  }

  const finalCode = `${comments}\n${combinedCode}`;

  // Create the final agent object, combining the partial data with defaults.
  const agent: CompleteAgent = {
    id: config.agentData.id || 'new_agent',
    name: config.agentData.name || 'My New Agent',
    description: config.agentData.description || 'An agent created with the Simple Creator.',
    model_name: config.agentData.model_name || '',
    system_prompt: config.agentData.system_prompt || '',
    loop_interval_seconds: config.agentData.loop_interval_seconds || 60,
  };

  return {
    agent,
    code: finalCode,
  };
}
