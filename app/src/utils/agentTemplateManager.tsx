// src/utils/agentTemplateManager.ts

import { CompleteAgent } from './agent_database';

export type SimpleTool = 'notification' | 'memory';

const TOOL_CODE_SNIPPETS: Record<SimpleTool, string> = {
  notification: `
// --- NOTIFICATION TOOL ---
notify("Observer AI Agent", response);
`,
  memory: `
// --- MEMORY TOOL ---
const timestamp = time();
appendMemory(agentId, \`\\n[\${timestamp}] \${response}\`);
`
};

interface SimpleConfig {
  agentData: Partial<CompleteAgent>;
  selectedTools: SimpleTool[];
  condition: {
    enabled: boolean;
    keyword: string;
  };
}

/**
 * Generates a complete agent configuration object and code string
 * from the simple creator's configuration.
 * @param config The configuration object from the SimpleCreatorModal.
 * @returns An object with the complete agent data and the generated code.
 */

export function generateAgentFromSimpleConfig(
  config: SimpleConfig
): { agent: CompleteAgent; code: string } {
  
  const comments = [
    '// This code was auto-generated by the Simple Agent Creator.',
    '// You can edit it to add more complex logic.',
  ].join('\n');

  // Combine the code snippets for all selected tools, separated by a blank line.
  let toolCode = config.selectedTools
    .map(tool => TOOL_CODE_SNIPPETS[tool].trim()) // Use .trim() to handle varying snippet whitespace
    .join('\n\n');

  if (config.condition.enabled && config.condition.keyword) {
    // Use JSON.stringify for robustly escaping the user's keyword.
    // We slice off the outer quotes that stringify adds.
    const safeKeyword = JSON.stringify(config.condition.keyword.toLowerCase()).slice(1, -1);
    
    // Indent the entire block of tool code by replacing every newline
    // with a newline followed by two spaces.
    const indentedToolCode = `  ${toolCode.replace(/\n/g, '\n  ')}`;

    toolCode = `if (response.toLowerCase().includes('${safeKeyword}')) {\n${indentedToolCode}\n}`;
  }

  const finalCode = `${comments}\n\n${toolCode}`;

  const agent: CompleteAgent = {
    id: config.agentData.id || `agent_${Date.now()}`, // Added a more unique default ID
    name: config.agentData.name || 'My New Agent',
    description: config.agentData.description || 'An agent created with the Simple Creator.',
    model_name: config.agentData.model_name || '',
    system_prompt: config.agentData.system_prompt || '',
    loop_interval_seconds: config.agentData.loop_interval_seconds || 60,
  };

  return {
    agent,
    code: finalCode,
  };
}
