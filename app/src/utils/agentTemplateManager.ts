import { CompleteAgent } from './agent_database';

export type SimpleTool = 'notification' | 'memory' | 'sms';

export interface ToolData {
  smsPhoneNumber?: string;
}

const TOOL_CODE_SNIPPETS: Record<SimpleTool, (data: ToolData) => string> = {
  notification: () => `
// --- NOTIFICATION TOOL ---
// Sends the model's entire response as a desktop notification.
notify("Observer AI Agent", response);
`,
  memory: () => `
// --- MEMORY TOOL ---
// Appends the model's response to this agent's memory, with a timestamp.
const timestamp = time();
appendMemory(agentId, \`\\n[\${timestamp}] \${response}\`);
`,
  // 3. The `sms` tool function remains the same, and now matches the type.
  sms: (data: ToolData) => {
    const phoneNumber = data.smsPhoneNumber ? JSON.stringify(data.smsPhoneNumber) : '""';
    return `
// --- SMS TOOL ---
// Sends the model's response as an SMS to the specified number.
sendSms(response, ${phoneNumber});
`;
  }
};

interface SimpleConfig {
  agentData: Partial<CompleteAgent>;
  selectedTools: Map<SimpleTool, ToolData>;
  condition: {
    enabled: boolean;
    keyword: string;
  };
}

export function generateAgentFromSimpleConfig(
  config: SimpleConfig
): { agent: CompleteAgent; code: string } {
  
  const comments = [
    '// This code was auto-generated by the Simple Agent Creator.',
    '// You can edit it to add more complex logic.',
  ].join('\n');

  // This .map() call now works perfectly because TOOL_CODE_SNIPPETS[tool] is always a function.
  let toolCode = Array.from(config.selectedTools.entries())
    .map(([tool, data]) => TOOL_CODE_SNIPPETS[tool](data).trim())
    .join('\n\n');

  if (config.condition.enabled && config.condition.keyword) {
    const safeKeyword = JSON.stringify(config.condition.keyword.toLowerCase()).slice(1, -1);
    const indentedToolCode = `  ${toolCode.replace(/\n/g, '\n  ')}`;
    toolCode = `if (response.toLowerCase().includes('${safeKeyword}')) {\n${indentedToolCode}\n}`;
  }

  const finalCode = `${comments}\n\n${toolCode}`;

  const agent: CompleteAgent = {
    id: config.agentData.id || `agent_${Date.now()}`,
    name: config.agentData.name || 'My New Agent',
    description: config.agentData.description || 'An agent created with the Simple Creator.',
    model_name: config.agentData.model_name || '',
    system_prompt: config.agentData.system_prompt || '',
    loop_interval_seconds: config.agentData.loop_interval_seconds || 60,
  };

  return {
    agent,
    code: finalCode,
  };
}
